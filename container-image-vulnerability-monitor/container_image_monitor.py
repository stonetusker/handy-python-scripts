import json
import subprocess
import os
from datetime import datetime

# Best Practice: Define constants for configuration and output directories
CONFIG_FILE = 'config.json'
REPORT_DIR = 'reports'

def scan_image(image_name):
    """
    Scans a single Docker image using Trivy and returns the results.
    """
    print(f"üîç Scanning image: {image_name}...")
    
    # Best Practice: Use subprocess.run for modern, robust command execution.
    # The command tells Trivy to scan an image, format the output as JSON,
    # and be quiet (no progress bars) for cleaner output capturing.
    command = [
        "trivy", "image", 
        "--format", "json",
        "--quiet",
        image_name
    ]
    
    try:
        # capture_output=True -> Captures stdout and stderr
        # text=True -> Decodes stdout/stderr as text
        # check=True -> Raises an exception if the command returns a non-zero exit code (i.e., fails)
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        
        # Parse the JSON string from stdout into a Python dictionary
        scan_results = json.loads(result.stdout)
        print(f"‚úÖ Scan complete for {image_name}.")
        return scan_results
    
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error scanning {image_name}.")
        print(f"   Trivy Error: {e.stderr}")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå Error: Could not parse Trivy's JSON output for {image_name}.")
        return None

def generate_report(image_name, scan_results):
    """
    Generates a Markdown report from the scan results.
    """
    # Create the reports directory if it doesn't exist
    os.makedirs(REPORT_DIR, exist_ok=True)
    
    # Best Practice: Create meaningful report filenames
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    # Sanitize image name for filename
    safe_image_name = image_name.replace('/', '_').replace(':', '_')
    report_filename = os.path.join(REPORT_DIR, f"{safe_image_name}_{timestamp}.md")
    
    print(f"üìÑ Generating report: {report_filename}")
    
    with open(report_filename, 'w') as f:
        f.write(f"# Vulnerability Scan Report for `{image_name}`\n\n")
        f.write(f"**Scan Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        # Handle cases where Trivy finds nothing or the image is clean
        if not scan_results or 'Results' not in scan_results or not scan_results['Results']:
            f.write("## ‚úÖ No vulnerabilities found!\n")
            print(f"‚ú® No vulnerabilities found for {image_name}.")
            return

        # Summary Section
        f.write("## Summary\n\n")
        vulnerability_counts = {}
        for result in scan_results.get('Results', []):
            for vuln in result.get('Vulnerabilities', []):
                severity = vuln.get('Severity', 'UNKNOWN')
                vulnerability_counts[severity] = vulnerability_counts.get(severity, 0) + 1
        
        for severity, count in sorted(vulnerability_counts.items()):
            f.write(f"- **{severity}:** {count}\n")
        f.write("\n---\n\n")

        # Detailed Section
        f.write("## üîé Detailed Findings\n\n")
        for result in scan_results.get('Results', []):
            f.write(f"### Target: `{result.get('Target')}` ({result.get('Type')})\n\n")
            
            if not result.get('Vulnerabilities'):
                f.write("No vulnerabilities found in this target.\n\n")
                continue
            
            # Create a markdown table
            f.write("| Severity | CVE ID | Package | Installed Version | Fixed Version |\n")
            f.write("|----------|--------|---------|-------------------|---------------|\n")
            
            for vuln in result.get('Vulnerabilities', []):
                f.write(
                    f"| {vuln.get('Severity', 'N/A')} "
                    f"| [{vuln.get('VulnerabilityID', 'N/A')}]({vuln.get('PrimaryURL', '#')}) "
                    f"| `{vuln.get('PkgName', 'N/A')}` "
                    f"| {vuln.get('InstalledVersion', 'N/A')} "
                    f"| {vuln.get('FixedVersion', 'Not fixed')} |\n"
                )
            f.write("\n")

def main():
    """
    Main function to run the vulnerability monitor.
    """
    try:
        with open(CONFIG_FILE, 'r') as f:
            config = json.load(f)
            images = config.get("images_to_scan", [])
    except FileNotFoundError:
        print(f"‚ùå Error: Configuration file '{CONFIG_FILE}' not found.")
        return
    except json.JSONDecodeError:
        print(f"‚ùå Error: Could not parse '{CONFIG_FILE}'. Make sure it's valid JSON.")
        return

    if not images:
        print("ü§∑ No images to scan in the configuration file.")
        return

    for image in images:
        results = scan_image(image)
        if results:
            generate_report(image, results)
        print("-" * 40)

if __name__ == "__main__":
    main()
